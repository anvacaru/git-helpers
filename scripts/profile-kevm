#!/usr/bin/env bash
set -euxo pipefail

SCRIPT_DIR="$(pwd)"

# Disable the Python keyring, otherwise poetry sometimes asks for password. See
#  https://github.com/pypa/pip/issues/7883
export PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring


KEVM_VERSION=${KEVM_VERSION:-'master'}
KEVM_VERSION="${KEVM_VERSION//\//-}"
echo "PROFILING VERSION: ${KEVM_VERSION}"

COMMIT="$(git rev-parse --short $KEVM_VERSION)"
echo "COMMIT: $COMMIT"

PYTEST_PARALLEL=${PYTEST_PARALLEL:-4}
echo "CREATING LOG DIR: ${SCRIPT_DIR}/logs"

mkdir -p $SCRIPT_DIR/logs

CXX=clang++-14

# Create a temporary directory and store its name in a variable.
TEMPD=$(mktemp -d)

# Exit if the temp directory wasn't created successfully.
if [ ! -e "$TEMPD" ]; then
    >&2 echo "Failed to create temp directory"
    exit 1
fi

clean_up () {
    rm -rf "$TEMPD"
    killall kore-rpc-booster || echo "no zombie processes found"
}

# Make sure the temp directory gets removed (unless KEEP_TEMPD is set) and kore-rpc-booster gets killed on script exit.
trap "exit 1"  HUP INT PIPE QUIT TERM
trap clean_up  EXIT

cd $TEMPD

# poetry takes too long to clone kevm-pyk, so we just do a shallow clone locally and override pyproject.toml
git clone --depth 1 --branch $KEVM_VERSION https://github.com/runtimeverification/evm-semantics.git
cd evm-semantics
git submodule update --init --recursive --depth 1 kevm-pyk/src/kevm_pyk/kproj/plugin

nix_shell() {
  GC_DONT_GC=1 nix develop . --extra-experimental-features 'nix-command flakes' --command bash -c "$1"
}

nix_shell "kup install k.openssl.procps --version v$(cat deps/k_release)"

nix_shell "make poetry && poetry run -C kevm-pyk -- kdist --verbose build evm-semantics.plugin evm-semantics.haskell --jobs 4"

# kompile all verification K definitions and specs
PREKOMPILED_DIR=$TEMPD/prekompiled
mkdir -p $PREKOMPILED_DIR
nix_shell "cd kevm-pyk && poetry run pytest src/tests/integration/test_prove.py::test_kompile_targets -vv --maxfail=0 --kompiled-targets-dir $PREKOMPILED_DIR"

if [ ! -e "$SCRIPT_DIR/logs/kevm-$KEVM_VERSION-$COMMIT.log" ]; then
  nix_shell "make test-prove-rules PYTEST_PARALLEL=$PYTEST_PARALLEL PYTEST_ARGS='--maxfail=0 --timeout 7200 -vv --kompiled-targets-dir $PREKOMPILED_DIR' | tee $SCRIPT_DIR/logs/kevm-$KEVM_VERSION-$COMMIT.log"
  killall kore-rpc-booster || echo "no zombie processes found"
fi

cd $SCRIPT_DIR/logs

grep ' call  ' kevm-$KEVM_VERSION-$COMMIT.log > kevm-$KEVM_VERSION-$COMMIT